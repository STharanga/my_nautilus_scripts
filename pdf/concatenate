#!/bin/bash
# 2015-01-25 - by yeKcim
# License: GNU General Public License V3, 29 June 2007
# Installation:
    # Nautilus: copy this file in ~/.local/share/nautilus/scripts/ and chmod +x it
    # Nemo: copy this file in ~/.gnome2/nemo-scripts/ and chmod +x it
# Dependency: pdftk
# Concatenate multiple pdf in one
IFS="
"
################################################
#        notification depends of system        #
################################################
function notif { 
    # the script is running in a term
    if [ $(env | grep '^TERM') ]; then printf "\n#### $(basename "$0") notification ####\n  ⇒  $1\n\n"
    # in x, notifications
    else
        if [ $(which notify-send) ]; then notify-send "$1"
        elif [ $(which zenity) ]; then
            echo "message:$1" | zenity --notification --listen &
        elif [ $(which kdialog) ]; then
            kdialog --title "$1" --passivepopup "This popup will disappear in 5 seconds" 5 &
        elif [ $(which xmessage) ]; then xmessage "$1" -timeout 5
        # You don't have notifications? I don't care, I need to tell you something!
        else
            echo "$1" > "$(basename $0)_notif.txt"
        fi
    fi
}

################################################
#               dependency check               #
################################################
function depend_check {
    if [ ! $(which $1) ]; then
        notif "Error: Could not find \"$1\" application."
        exit 1
    fi
}

################################################
#         do not overwrite with output         #
################################################
function do_not_overwrite {
    out="$1"
    while [[ -a "$out" ]]; do
        when=$(date +%Y%m%d-%H:%M:%S)
        [[ -f "$out" ]] && out="${out%.*}#$when.${out##*.}" || out="$out#$when"
    done
    echo "$out"
}

################################################
#                    script                    #
################################################
# check if input files > 1
if (( $# <= "1" )); then 
    notif "$# file selected, \"$(basename $0)\" needs at least 2 input files" 
    exit 1
fi

directory="$(pwd)"
arguments=""
for arg
do
    # input/output
    input=$(readlink -f "$arg")
    input_filename=$(basename "$input")
    input_filename_with_path=$(readlink -f "$input")
    output=$(do_not_overwrite "$directory/joined.pdf")
    
    type=$(file --mime-type -b "$input" | cut -d "/" -f2)

    case $type in
        "pdf")
            work="pdf"
            depend_check pdftk
            arguments="$arguments \"$input_filename_with_path\"" #TODO: doesn't work for files with "`" caractere in name
            ;;
        *) 
            work="0"
            notif "Error: \"$input_filename\" mimetype is not supported"
            exit 1
            ;; #TODO: if input is not pdf, it's probably possible to convert it in pdf first…
    esac
    
done

# inputs mimetype are supported
if [[ $work != "0" ]]; then
    if [ -n "$arguments" ]; then
        eval pdftk "$arguments" cat output $output #TODO: check if exist, check rights
    fi
fi
