#!/bin/bash
# 2015-01-25 - by yeKcim
# All my extensions: https://github.com/yeKcim/my_nautilus_scripts
# License: GNU General Public License V3, 29 June 2007
# Installation:
    # Nautilus: copy this file in ~/.local/share/nautilus/scripts/ and chmod +x it
    # Nemo: copy this file in ~/.gnome2/nemo-scripts/ and chmod +x it
# Dependency: gs
# Compress PDF
IFS="
"
################################################
#        notification depends of system        #
################################################
function notif { 
    # the script is running in a term
    if [ $(env | grep '^TERM') ]; then printf "\n#### $(basename -- "$0") notification ####\n  â‡’  $1\n\n"
    # in x, notifications
    else
        if [ $(which notify-send) ]; then notify-send "$1"
        elif [ $(which zenity) ]; then
            echo "message:$1" | zenity --notification --listen &
        elif [ $(which kdialog) ]; then
            kdialog --title "$1" --passivepopup "This popup will disappear in 5 seconds" 5 &
        elif [ $(which xmessage) ]; then xmessage "$1" -timeout 5
        # You don't have notifications? I don't care, I need to tell you something!
        else
            echo "$1" > "$(basename -- $0)_notif.txt"
        fi
    fi
}

################################################
#               dependency check               #
################################################
function depend_check {
    if [ ! $(which $1) ]; then
        notif "Error: Could not find \"$1\" application."
        exit 1
    fi
}

################################################
#         do not overwrite with output         #
################################################
function do_not_overwrite {
    out="$1"
    while [[ -a "$out" ]]; do
        when=$(date +%Y%m%d-%H:%M:%S)
        [[ -f "$out" ]] && out="${out%.*}#$when.${out##*.}" || out="$out#$when"
    done
    echo "$out"
}

################################################
#                    script                    #
################################################
# check if input files > 1
if (( $# <= "0" )); then 
    notif "$# file selected, \"$(basename -- $0)\" needs at least 1 input file" 
    exit 1
fi

# resolution?
argfromscriptname=$(echo "$0" | sed -n 's/.*\[\(.*\)\].*/\1/p')
resolution=$argfromscriptname

directory="$(pwd)"
mime_error=0; mime_error_file=""
for arg
do

    # input/output
    input=$(readlink -f -- "$arg")
    input_filename=$(basename -- "$input")
    dir_input=$(readlink -f $(dirname $input))
    output_name="${input%.*}_$resolution.${input##*.}" #TODO: check if exist, check rights
    output_name=$(do_not_overwrite "$output_name")
    
    type=$(file --mime-type -b -- "$input" | cut -d "/" -f2) #TODO: test if file exist first
    
    case $type in
        "pdf") work="pdfwrite";;
        "postscript") work="ps2write";;
        *) work="0";;
    esac

    # input mimetype is supported
    if [ $work != "0" ]; then
        depend_check gs
        cd $dir_input
        gs -sDEVICE=$work -dCompatibilityLevel=1.4 -dPDFSETTINGS=/$resolution -dSAFER -dNOPAUSE -dQUIET -dBATCH -sOutputFile="$output_name" "$input_filename"
        mv $output_name $directory
        cd $directory
    # input mimetype is not supported
    else
        ((mime_error++)); mime_error_file="$mime_error_file \"$input_filename\""
    fi
done

# notif mime errors
if [[ $mime_error != 0 ]]; then
    [[ $mime_error == 1 ]] && notif "Error: $mime_error_file mimetype not supported"
    [[ $mime_error > 1 ]] && [[ $mime_error < $# ]] && notif "Error: mimetype not supported ($mime_error/$# files:$mime_error_file)"
    [[ $mime_error > 1 ]] && [[ $mime_error = $# ]] && notif "Error: Selected files mimetype not supported"
fi
