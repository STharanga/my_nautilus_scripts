#!/bin/bash
# https://github.com/yeKcim/my_nautilus_scripts
# License: GNU General Public License V3, 29 June 2007
# Installation:
	# Nautilus: copy this file in ~/.local/share/nautilus/scripts/ and chmod +x it
	# Nemo: copy this file in ~/.gnome2/nemo-scripts/ and chmod +x it
# Dependency: avconv
# Rotate videos or pics
IFS="
"
################################################
#        notification depends of system        #
################################################
function notif { 
    # the script is running in a term
    if [ $(env | grep '^TERM') ]; then printf "\n#### $(basename -- "$0") notification ####\n  ⇒  $1\n\n"
    # in x, notifications
    else
        if [ $(which notify-send) ]; then notify-send "$1"
        elif [ $(which zenity) ]; then
            echo "message:$1" | zenity --notification --listen &
        elif [ $(which kdialog) ]; then
            kdialog --title "$1" --passivepopup "This popup will disappear in 5 seconds" 5 &
        elif [ $(which xmessage) ]; then xmessage "$1" -timeout 5
        # You don't have notifications? I don't care, I need to tell you something!
        else
            echo "$1" > "$(basename -- $0)_notif.txt"
        fi
    fi
}
################################################
#               dependency check               #
################################################
function depend_check {
    for arg
    do
        if [ ! $(which $arg) ]; then
            notif "Error: Could not find \"$arg\" application."
            exit 1
        fi
    done    
}
################################################
#         do not overwrite with output         #
################################################
function do_not_overwrite {
    out="$1"
    while [[ -a "$out" ]]; do
        when=$(date +%Y%m%d-%H:%M:%S)
        [[ -f "$out" ]] && out="${out%.*}#$when.${out##*.}" || out="$out#$when"
    done
    echo "$out"
}
################################################
#          check if input files > min          #
################################################
function nb_files_check {
    nb_files="$1"
    min_nb_files="$2"
    if (( $1 < $2 )); then 
        [[ $2 == 1 ]] && notif "$1 file selected, \"$(basename -- $0)\" needs at least one input file" || notif "$1 file selected, \"$(basename -- $0)\" needs at least $2 input files" 
        exit 1
    fi 
}
################################################
#              error notifications             #
################################################
function error_check {
    nb_files="$1"
    error_message="Error: $2"
    nb_error="$3"
    name_error_files="$4"

    if [[ $nb_error != 0 ]]; then
        [[ $nb_error == 1 ]] && error_message="$error_message:$name_error_files"
        [[ $nb_error > 1 ]] && [[ $nb_error < $nb_files ]] && error_message="$error_message ($nb_error/$nb_files files: $name_error_files)"
        [[ $nb_error > 1 ]] && [[ $nb_error = $nb_files ]] && error_message="$error_message (All selected files)"
    notif "$error_message"
    fi
}
################################################
#      error write rights notifications        #
################################################
function write_rights_outdir_check {
    out=$(readlink -f -- "$1")
    outdir="${out%/*}"
    error="0"
    if [[ ! -w "$outdir" ]]; then
        notif "Can't write in \"$outdir\", check rights"
        error="1"
    fi
    return $error
}

################################################
#                    script                    #
################################################
nb_files_check $# 1

# Rotation?
argfromscriptname=$(echo "$0" | sed -n 's/.*\[\(.*\)\].*/\1/p')
case $argfromscriptname in
    "90°")  rotationv="transpose=1";                action="rotate" ;;
    "-90°") rotationv="transpose=2";                action="rotate" ;;
    "180°") rotationv="transpose=1,transpose=1";    action="rotate" ;;
    "flip") rotationv="transpose=3,transpose=1";    action="$argfromscriptname"  ;;
    "flop") rotationv="transpose=0,transpose=1";    action="$argfromscriptname" ;;
    *)      rotationv="transpose=2";                action="flip" ;;
esac

mime_error=0; mime_error_file=""
directory="$(pwd)"
for arg
do
    # input/output
    input=$(readlink -f -- "$arg")
    input_filename=$(basename -- "$input")
    output=$(do_not_overwrite "$directory/${input_filename%.*}_$argfromscriptname.${input_filename##*.}")
    
    type=$(file --mime-type -b -- "$input" | cut -d "/" -f1)
    
    case $type in
        "video") # input mimetype is supported
            depend_check avconv
            avconv -i "$input" -vf "$rotationv" -strict experimental "$output";;
            
        "image") # input mimetype is supported
            depend_check convert
            [[ $action == "rotate" ]] && convert -$action ${argfromscriptname%°*} -- "$input" "$output" ||  convert -$action -- "$input" "$output"
            ;;

        *) # input mimetype is not supported
            ((mime_error++)); mime_error_file="$mime_error_file \"$input_filename\"" ;;
    esac
done

error_check "$#" "Mimetype not supported" "$mime_error" "$mime_error_file"
