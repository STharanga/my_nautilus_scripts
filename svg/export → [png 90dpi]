#!/bin/bash

# https://github.com/yeKcim/my_nautilus_scripts
# License: GNU General Public License V3, 29 June 2007
# Installation:
    # Nautilus: copy this file in ~/.local/share/nautilus/scripts/ and chmod +x it
    # Nemo: copy this file in ~/.gnome2/nemo-scripts/ and chmod +x it
# Dependency: inkscape and convert (if output is jpg)
# Export svg to bitmap
IFS="
"
################################################
#        notification depends of system        #
################################################
function notif { 
    # the script is running in a term
    if [ $(env | grep '^TERM') ]; then printf "\n#### $(basename -- "$0") notification ####\n  â‡’  $1\n\n"
    # in x, notifications
    else
        if [ $(which notify-send) ]; then notify-send "$1"
        elif [ $(which zenity) ]; then
            echo "message:$1" | zenity --notification --listen &
        elif [ $(which kdialog) ]; then
            kdialog --title "$1" --passivepopup "This popup will disappear in 5 seconds" 5 &
        elif [ $(which xmessage) ]; then xmessage "$1" -timeout 5
        # You don't have notifications? I don't care, I need to tell you something!
        else
            echo "$1" > "$(basename -- $0)_notif.txt"
        fi
    fi
}

################################################
#               dependency check               #
################################################
function depend_check {
    for arg
    do
        if [ ! $(which $arg) ]; then
            notif "Error: Could not find \"$arg\" application."
            exit 1
        fi
    done    
}

################################################
#         do not overwrite with output         #
################################################
function do_not_overwrite {
    out="$1"
    while [[ -a "$out" ]]; do
        when=$(date +%Y%m%d-%H:%M:%S)
        [[ -f "$out" ]] && out="${out%.*}#$when.${out##*.}" || out="$out#$when"
    done
    echo "$out"
}

################################################
#                    script                    #
################################################
# check if input files > 1
if (( $# <= "0" )); then 
    notif "$# file selected, \"$(basename -- $0)\" needs at least 1 input file" 
    exit 1
fi

depend_check inkscape

# conversion type?
argfromscriptname=$(echo "$0" | sed -n 's/.*\[\(.*\)dpi\].*/\1/p')
format=$(echo $argfromscriptname | cut -d " " -f1)
resolution=$(echo $argfromscriptname | cut -d " " -f2)

directory="$(pwd)"
mime_error=0; mime_error_file=""
for arg
do
    # input/output
    input=$(readlink -f -- "$arg")
    input_filename=$(basename -- "$input")
    output=$(do_not_overwrite "$directory/${input_filename%.*}_${resolution}dpi.$format")

    type=$(file --mime-type -b -- "$input" | cut -d "/" -f2)
    typez=$(file --mime-type -bz "$input" | cut -d "/" -f2)    

    if [ "$type" == "gzip" ] && [ "$typez" == "svg+xml" ]; then
        work="1"
    elif [ "$type" == "svg+xml" ]; then
        work="1"
    else work="0"
    fi
    
    if [[ $work != "0" ]]; then
        if [[ $format == "png" ]]; then
	        inkscape -d "$resolution" -e "$output" "$input"        
        else
            depend_check convert
            fifo_file="${output}_fifo.png"
	        mkfifo "$fifo_file"
	        inkscape -d "$resolution" -e "$fifo_file" "$input" < /dev/null &
	        convert "$fifo_file" -background white -flatten "$output"
	        rm -f "$fifo_file"
        fi
    else
            ((mime_error++)); mime_error_file="$mime_error_file \"$input_filename\""
    fi
done

# notif mime errors
if [[ $mime_error != 0 ]]; then
    [[ $mime_error == 1 ]] && notif "Error: $mime_error_file mimetype not supported"
    [[ $mime_error > 1 ]] && [[ $mime_error < $# ]] && notif "Error: mimetype not supported ($mime_error/$# files:$mime_error_file)"
    [[ $mime_error > 1 ]] && [[ $mime_error = $# ]] && notif "Error: Selected files mimetype not supported"
fi
